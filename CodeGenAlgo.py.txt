class Node:
    pass

class BinOp(Node):
    def __init__(self, left, op, right):
        self.left = left
        self.op = op
        self.right = right

class Num(Node):
    def __init__(self, value):
        self.value = value

def generate_code(node):
    if isinstance(node, BinOp):
        left_code = generate_code(node.left)
        right_code = generate_code(node.right)
        return f"({left_code} {node.op} {right_code})"
    elif isinstance(node, Num):
        return str(node.value)
    else:
        raise ValueError("Invalid node type")

# Example syntax tree representing the expression: (3 + 4) * 5
syntax_tree = BinOp(BinOp(Num(3), '+', Num(4)), '*', Num(5))

# Generate code for the syntax tree
generated_code = generate_code(syntax_tree)
print("Generated code:", generated_code)
